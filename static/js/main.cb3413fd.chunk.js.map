{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","components/AddItemForm/AddItemForm.tsx","api/todolists-api.ts","api/auth-api.ts","utils/error-utills.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/ToDoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","title","setTitle","error","setError","status","useSelector","state","app","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","trim","color","ControlPoint","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todoId","delete","put","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","type","initialised","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","taskApi","todolistId","taskId","model","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","aria-label","removeTask","Delete","updateTaskTC","domainModel","getState","tasks","find","t","apiModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","ToDoList","demo","useDispatch","useEffect","todolist","setTasksAC","items","addTask","removeTodoList","changeTodoListTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","map","style","paddingTop","Button","TodolistsList","todolists","auth","todoListID","todolistID","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","action","thunk","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodoList","addTodolistsTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbars","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","dispath","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","alert","JSON","stringify","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","left","width","rootReducer","combineReducers","entityStatus","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCYMC,EAMAC,E,0GCvBCC,EAAcC,IAAMC,MAAM,YAA4D,IAAjDC,EAAgD,EAAhDA,QAAgD,IAAvCC,gBAAuC,SAC9F,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAASC,aAAiD,SAAAC,GAAK,OAAGA,EAAMC,IAAIH,UAqBlF,OAAO,6BAEH,kBAACI,EAAA,EAAD,CACIV,SAAqB,YAAXM,EACVK,MAAOT,EACAU,QAAS,WACTC,MAAO,aACPC,SA3BS,SAACC,GACrBZ,EAASY,EAAEC,cAAcL,QA2BdM,WAzBW,SAACF,GACV,OAAVX,GACCC,EAAS,MAEC,UAAVU,EAAEG,MACFnB,EAAQG,GACRC,EAAS,MAoBFC,QAASA,EACTe,WAAYf,IAEvB,kBAACgB,EAAA,EAAD,CAAYC,QApBO,WACE,KAAjBnB,EAAMoB,QACNvB,EAAQG,EAAMoB,QACdnB,EAAS,KAETE,EAAS,4BAewBL,SAAYA,EAAUuB,MAAO,WAAlE,IAA8E,kBAACC,EAAA,EAAD,W,0CC9CzEC,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAMNC,EAAc,WAEnB,OAAON,EAASO,IAAqB,eAFhCD,EAAc,SAIZ7B,GACP,OAAOuB,EAASQ,KAA6C,aAAc,CAAC/B,WALvE6B,EAAc,SAOZG,GACP,OAAOT,EAASU,OAAT,qBAAkDD,KARpDH,EAAc,SAUPG,EAAgBhC,GAC5B,OAAOuB,EAASW,IAAT,qBAA+CF,GAAU,CAAChC,WClB5DmC,EAAU,SACbC,GACF,OAAOb,EAASQ,KAA2C,aAAcK,IAFpED,EAAU,WAKf,OAAOZ,EAASO,IAAmE,YAL9EK,EAAU,WAQf,OAAOZ,EAASU,OAA6C,YCVxDI,EAAuB,SAAID,EAAgCE,GAAsE,IAAD,GAEzI,OAAIF,QAAJ,IAAIA,GAAJ,UAAIA,EAAMG,gBAAV,aAAI,EAAgBC,QAChBF,EAASG,EAAcL,EAAKG,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,YAGfC,EAAyB,SAACzC,EAA4BoC,GAC/DA,EAASG,EAAcvC,EAAM0C,QAAU1C,EAAM0C,QAAS,wBACtDN,EAASI,EAAe,YCXtBG,EAAiC,CACnCC,YAAY,GAiBHC,EAAkB,SAACtC,GAAD,MAC1B,CAACuC,KAAM,yBAA0BvC,UCpBhCoC,EAAiC,CACnCzC,OAAQ,OACRF,MAAO,KACP+C,aAAa,GAmBJR,EAAgB,SAACvC,GAAD,MAA2B,CAAC8C,KAAM,gBAAiB9C,UACnEwC,EAAiB,SAACtC,GAAD,MAAgC,CAAC4C,KAAM,iBAAkB5C,WCrBjFyC,EAA0C,G,SCMnCK,EAAevD,IAAMC,MAAK,SAACuD,GAExC,MAA8BpD,oBAAS,GAAvC,mBAAKqD,EAAL,KAAeC,EAAf,KAEA,EAAwBtD,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KAYI,OAAOmD,EACD,kBAAC5C,EAAA,EAAD,CAAWC,MAAOT,EAAOY,SAFF,SAACC,GAAD,OAAsCZ,EAASY,EAAEC,cAAcL,QAE7B6C,OANtC,WACzBD,GAAY,GACRF,EAAMvC,SAASZ,IAIsEuD,WAAS,IAC5F,0BAAMC,cAba,WACzBH,GAAY,GACRpD,EAASkD,EAAMnD,SAW2BmD,EAAMnD,U,SR1B3CyD,EAAU,SACVC,GAEL,OAAOnC,EAASO,IAAT,sBAAqD4B,EAArD,YAHFD,EAAU,SAKRC,EAAoBC,GAE3B,OAAOpC,EAASU,OAAT,qBAAsDyB,EAAtD,kBAA0EC,KAP5EF,EAAU,SASRC,EAAoB1D,GAC3B,OAAOuB,EAASQ,KAAT,sBAA0E2B,EAA1E,UAA8F,CAAC1D,WAVjGyD,EAAU,SAeRC,EAAoBC,EAAgBC,GAC3C,OAAOrC,EAASW,IAAT,sBAA+DwB,EAA/D,kBAAmFC,GAAU,CAACC,Y,SAUjGpE,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,eAAAA,I,uBAAAA,I,kBAAAA,M,kBSpBCoE,EAAOlE,IAAMC,MAAK,SAACuD,GAC5B,IAOMW,EAAuBC,uBAAY,SAACC,GACtCb,EAAMc,gBAAgBd,EAAMe,KAAKC,GAAIH,EAAUb,EAAMO,cACtD,CAACP,EAAMe,KAAKC,GAAIhB,EAAMc,gBAAiBd,EAAMO,aAEhD,OAAO,yBAAK1C,IAAKmC,EAAMe,KAAKC,GAChBC,UAAWjB,EAAMe,KAAK9D,SAAWZ,EAAa6E,UAAY,UAAY,IAE9E,kBAACC,EAAA,EAAD,CACI1D,SAZsB,SAACC,GAC3B,IAAI0D,EAAiB1D,EAAEC,cAAc0D,QACrCrB,EAAMsB,iBAAiBtB,EAAMe,KAAKC,GAAII,EAAiB/E,EAAa6E,UAAY7E,EAAakF,IAAKvB,EAAMO,aAWpGc,QAASrB,EAAMe,KAAK9D,SAAWZ,EAAa6E,UAC5ChD,MAAM,YAGV,kBAAC6B,EAAD,CAAclD,MAAOmD,EAAMe,KAAKlE,MAClBY,SAAUkD,IAGxB,kBAAC5C,EAAA,EAAD,CAAYyD,aAAW,SAASxD,QAxBb,WACnBgC,EAAMyB,WAAWzB,EAAMe,KAAKC,GAAIhB,EAAMO,cAwBlC,kBAACmB,EAAA,EAAD,W,QCjCNhC,EAA8B,GA4FvBiC,GAAe,SAACnB,EAAgBoB,EAAwCrB,GAAzD,OACxB,SAACpB,EAAyB0C,GACtB,IACMd,EADQc,IACKC,MAAMvB,GAAYwB,MAAK,SAAAC,GAAC,OAAIA,EAAEhB,KAAOR,KACxD,GAAKO,EAAL,CAIA,IAAMkB,EAA6B,aAC/BC,YAAanB,EAAKmB,YAClBrF,MAAOkE,EAAKlE,MACZI,OAAQ8D,EAAK9D,OACbkF,SAAUpB,EAAKoB,SACfC,UAAWrB,EAAKqB,UAChBC,SAAUtB,EAAKsB,UACZT,GAEPtB,EAAmBC,EAAYC,EAAQyB,GAClCK,MAAK,SAAAC,GAC0B,IAAxBA,EAAItD,KAAKuD,WAETrD,EA9DQ,SAACqB,EAAgBC,EAAkCF,GAAnD,MACvB,CAACV,KAAM,cAAeY,QAAOF,aAAYC,UA6DjBiC,CAAajC,EAAQoB,EAAarB,IAE3CrB,EAAqBqD,EAAItD,KAAME,MAGtCuD,OAAM,SAAC3F,GACJyC,EAAyBzC,EAAOoC,WAtBpCwD,QAAQC,KAAK,oC,YC/EZC,GAAWrG,IAAMC,MAAK,YAAwD,IAAD,IAA5CqG,YAA4C,SAA3B9C,EAA2B,kBAGhFb,EAAW4D,cAEjBC,qBAAU,WDkCc,IAACzC,ECjCjBuC,GAGJ3D,GD8BqBoB,EC9BCP,EAAMiD,SAASjC,GD8BO,SAAC7B,GACjDA,EAASI,EAAe,YACxBe,EAAiBC,GACZ+B,MAAK,SAACC,GACHpD,EARc,SAAC2C,EAAyBvB,GAA1B,MACrB,CAACV,KAAM,YAAaiC,QAAOvB,cAOX2C,CAAWX,EAAItD,KAAKkE,MAAO5C,IACpCpB,EAASI,EAAe,sBClC7B,IAGH,IAAM6D,EAAUxC,uBAAY,SAAC/D,GACzBmD,EAAMoD,QAAQvG,EAAOmD,EAAMiD,SAASjC,MACrC,IAEGqC,EAAiBzC,uBAAY,WAC/BZ,EAAMqD,eAAerD,EAAMiD,SAASjC,MACrC,IAEGsC,EAAsB1C,uBAAY,SAAC2C,GACrCvD,EAAMsD,oBAAoBtD,EAAMiD,SAASjC,GAAIuC,KAC9C,CAACvD,EAAMiD,SAASjC,GAAIhB,EAAMsD,sBAEvBE,EAAoB5C,uBAAY,WAClCZ,EAAMyD,aAAa,MAAOzD,EAAMiD,SAASjC,MAC1C,CAAChB,EAAMyD,aAAczD,EAAMiD,SAASjC,KAGjC0C,EAAuB9C,uBAAY,WACrCZ,EAAMyD,aAAa,SAAUzD,EAAMiD,SAASjC,MAC7C,CAAChB,EAAMyD,aAAczD,EAAMiD,SAASjC,KAGjC2C,EAA0B/C,uBAAY,WACxCZ,EAAMyD,aAAa,YAAazD,EAAMiD,SAASjC,MAChD,CAAChB,EAAMyD,aAAczD,EAAMiD,SAASjC,KAInC4C,EAAmB5D,EAAM8B,MAS7B,MAP8B,WAA1B9B,EAAMiD,SAASY,SACfD,EAAmB5D,EAAM8B,MAAM+B,QAAO,SAAA7B,GAAC,OAAIA,EAAE/E,SAAWZ,EAAakF,QAE3C,cAA1BvB,EAAMiD,SAASY,SACfD,EAAmB5D,EAAM8B,MAAM+B,QAAO,SAAA7B,GAAC,OAAIA,EAAE/E,SAAWZ,EAAa6E,cAGlE,6BACH,4BAAI,kBAACnB,EAAD,CAAclD,MAAOmD,EAAMiD,SAASpG,MAAOY,SAAU6F,IACrD,kBAACvF,EAAA,EAAD,CAAYyD,aAAW,SAASxD,QAASqF,GACrC,kBAAC3B,EAAA,EAAD,QAGR,kBAACnF,EAAD,CAAaG,QAAS0G,IAEtB,6BAEQQ,EAAiBE,KAAI,SAAA9B,GAAC,OAAI,kBAACtB,EAAD,CACtBK,KAAMiB,EACNV,iBAAkBtB,EAAMsB,iBACxBR,gBAAiBd,EAAMc,gBACvBW,WAAYzB,EAAMyB,WAClBlB,WAAYP,EAAMiD,SAASjC,GAC3BnD,IAAKmE,EAAEhB,SAInB,yBAAK+C,MAAO,CAACC,WAAY,SACrB,kBAACC,EAAA,EAAD,CAAQ1G,QAAmC,QAA1ByC,EAAMiD,SAASY,OAAmB,YAAc,OAEzD7F,QAASwF,EACTtF,MAAO,WAHf,OAMA,kBAAC+F,EAAA,EAAD,CAAQ1G,QAAmC,WAA1ByC,EAAMiD,SAASY,OAAsB,YAAc,OAC5D3F,MAAO,UAEPF,QAAS0F,GAHjB,UAMA,kBAACO,EAAA,EAAD,CAAQ1G,QAAmC,cAA1ByC,EAAMiD,SAASY,OAAyB,YAAc,OAC/D3F,MAAO,YAEPF,QAAS2F,GAHjB,kB,SClFCO,GAAkD,SAAC,GAAoB,IAAD,IAAlBpB,YAAkB,SACzEqB,EAAYjH,aAAyD,SAAAC,GAAK,OAAIA,EAAMgH,aACpFrC,EAAQ5E,aAA6C,SAAAC,GAAK,OAAIA,EAAM2E,SACpEnC,EAAazC,aAAuC,SAAAC,GAAK,OAAIA,EAAMiH,KAAKzE,cAGxER,EAAW4D,cAEjBC,qBAAU,YACFF,GAASnD,GAGbR,GLaG,SAACA,GACJA,EAASI,EAAe,YACxBb,IACK4D,MAAK,SAACC,GACHpD,EAT8C,CAACU,KAAM,gBAAiBsE,UAS/C5B,EAAItD,OAC3BE,EAASI,EAAe,iBAE3BmD,OAAM,SAAA3F,GACHmC,EAAqBnC,EAAOoC,WKpBrC,IAEH,IAAMsC,EAAab,uBAAY,SAAEI,EAAYqD,GACzClF,EF+BoB,SAACmF,EAAoBtD,GAArB,OAAoC,SAAC7B,GAE7DmB,EAAmBgE,EAAYtD,GAC1BsB,MAAK,SAAAC,GACFpD,EAtBP,CAACU,KAAM,cAAeU,WAsBW+D,EAtBC9D,OAsBLQ,QEnCjBuD,CAAaF,EAAYrD,MACnC,CAAC7B,IAEEiE,EAAUxC,uBAAY,SAAC/D,EAAe0D,GACxCpB,EFqCiB,SAACtC,EAAe0D,GAAhB,OAAuC,SAACpB,GAC7DA,EAASI,EAAe,YACxBe,EAAmBC,EAAY1D,GAC1ByF,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAItD,KAAKuD,WAAkB,CAC3B,IAAMzB,EAAOwB,EAAItD,KAAKA,KAAKuF,KAC3BrF,EAjCS,SAAC4B,GAAD,MACpB,CAAClB,KAAM,WAAYkB,QAgCC0D,CAAU1D,IACnB5B,EAASI,EAAe,mBAExBL,EAAqBqD,EAAItD,KAAME,MAGtCuD,OAAM,SAAC3F,GACJyC,EAAyBzC,EAAOoC,OElD3BuF,CAAU7H,EAAO0D,MAC3B,CAACpB,IAEEwF,EAAe/D,uBAAY,SAACJ,EAAgBvD,EAAsBoH,GACpElF,EAASwC,GAAanB,EAAQ,CAACvD,UAASoH,MACzC,CAAClF,IAEE2B,EAAkBF,uBAAY,SAACJ,EAAgB+C,EAAkBc,GACnElF,EAASwC,GAAanB,EAAQ,CAAC3D,MAAO0G,GAAWc,MAClD,CAAClF,IAEEsE,EAAe7C,uBAAY,SAACtD,EAAyB+G,GACvD,IAAMO,ELlBmE,CAC7E/E,KAAM,yBACNmB,GKgBiDqD,ELfjDR,OKe0CvG,GACtC6B,EAASyF,KACV,CAACzF,IAEEkE,EAAiBzC,uBAAY,SAACyD,GAChC,ILC0B9D,EKDpBsE,GLCoBtE,EKDM8D,ELE7B,SAAClF,GACJA,EAASI,EAAe,YAExBJ,EAvBgF,CAACU,KAAM,gCAAiCmB,GAuBvET,EAvB2EtD,OAuBtF,YAEtCyB,EAAuB6B,GAClB+B,MAAK,SAACC,GACHpD,EAvCgB,SAACoB,GAAD,MAAyB,CAACV,KAAM,kBAAmBmB,GAAIT,GAuC9DuE,CAAiBvE,IAC1BpB,EAASI,EAAe,mBKThCJ,EAAS0F,KACV,CAAC1F,IAEEmE,EAAsB1C,uBAAY,SAACI,EAAYnE,GACjDsC,ELmB6B,SAAC6B,EAAYnE,GAC9C,OAAO,SAACsC,GACJT,EAA4BsC,EAAInE,GAC3ByF,MAAK,SAACC,GACHpD,EAxDqB,SAAC6B,EAAYnE,GAAb,MAAgC,CACjEgD,KAAM,wBACNmB,GAAIA,EACJuC,SAAU1G,GAqDWkI,CAAsB/D,EAAInE,QKvBlCmI,CAAsBhE,EAAInE,MACpC,CAACsC,IAEE8F,EAAcrE,uBAAY,SAAC/D,GAC7BsC,ELKsB,SAACtC,GAC3B,OAAO,SAACsC,GACJA,EAASI,EAAe,YACxBb,EAAuB7B,GAClByF,MAAK,SAACC,GACHpD,EAhDsC,CAACU,KAAM,eAAgBoD,SAgDtCV,EAAItD,KAAKA,KAAKuF,OACrCrF,EAASI,EAAe,kBKXvB2F,CAAerI,MACzB,CAACsC,IAEJ,OAAKQ,EAKD,oCACI,kBAACwF,EAAA,EAAD,CAAMC,WAAS,EAACrB,MAAO,CAACsB,QAAS,SAC7B,kBAAC9I,EAAD,CAAaG,QAASuI,KAE1B,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjBnB,EAAUL,KAAI,SAAAyB,GACV,IAAIC,EAAmB1D,EAAMyD,EAAGvE,IAEhC,OAAO,kBAACmE,EAAA,EAAD,CAAMX,MAAI,EAAC3G,IAAK0H,EAAGvE,IACtB,kBAACyE,EAAA,EAAD,CAAO1B,MAAO,CAACsB,QAAS,SACpB,kBAACxC,GAAD,CACII,SAAUsC,EACV1H,IAAK0H,EAAGvE,GACRc,MAAO0D,EACP/D,WAAYA,EACZgC,aAAcA,EACdL,QAASA,EACT9B,iBAAkBqD,EAClB7D,gBAAiBA,EACjBuC,eAAgBA,EAChBC,oBAAqBA,EACrBR,KAAMA,WA1B3B,kBAAC,KAAD,CAAU4C,GAAI,Y,oBCvE7B,SAASC,GAAM3F,GACX,OAAO,kBAAC,KAAD,eAAU4F,UAAW,EAAGrI,QAAQ,UAAayC,IAGzC,SAAS6F,KACpB,MAAwBrJ,IAAMI,UAAS,GAAvC,mBAEMG,GAFN,UAEcG,aAA6C,SAAAC,GAAK,OAAGA,EAAMC,IAAIL,UAEvEoC,EAAW4D,cAEX+C,EAAc,SAACC,EAA6BC,GAC/B,cAAXA,GAGR7G,EAASG,EAAc,QAMjB2G,EAAmB,OAAVlJ,EAEf,OACQ,kBAACmJ,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,GACrD,kBAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,SACjCvJ,I,+DCtBRwJ,GAAQ,WACjB,IAAMC,EAAUzD,cAEVpD,EAAazC,aAAuC,SAAAC,GAAK,OAAGA,EAAMiH,KAAKzE,cAEvE8G,EAASC,aAAU,CACrBC,SAAU,SAACC,GACP,OAAIA,EAAOC,MAKPD,EAAOE,cAAX,EACW,CACHA,SAAU,qBANP,CACHD,MAAO,sBASnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GTLK,IAAC3H,ESMZuH,GTNYvH,ESMI2H,ETNsB,SAACzH,GAC/CA,EAASI,EAAe,YACxBP,EAAcC,GACTqD,MAAK,SAACC,GACyB,IAAxBA,EAAItD,KAAKuD,YACfrD,EAASS,GAAgB,IACnBT,EAASI,EAAe,eAExBL,EAAqBqD,EAAItD,KAAME,MAGtCuD,OAAM,SAAC3F,GACJyC,EAAyBzC,EAAOoC,MAExCA,EAASI,EAAe,iBSPhB2H,MAAMC,KAAKC,UAAUR,EAAQ,KAAM,OAI3C,OAAGjH,EACQ,kBAAC,KAAD,CAAU+F,GAAI,MAIlB,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAACiC,QAAQ,UAC3B,kBAAClC,EAAA,EAAD,CAAMX,MAAI,EAAC8C,GAAI,GACX,0BAAML,SAAUR,EAAOc,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAQ,UADX,SAIJ,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAACvK,EAAA,EAAD,eACIG,MAAM,QACNqK,OAAO,UACHpB,EAAOqB,cAAc,WAE5BrB,EAAOsB,OAAOlB,MAAQ,6BAAMJ,EAAOsB,OAAOlB,OAAe,KAC1D,kBAACxJ,EAAA,EAAD,eACIwC,KAAK,WACLrC,MAAM,WACNqK,OAAO,UACHpB,EAAOqB,cAAc,cAE5BrB,EAAOsB,OAAOjB,SAAW,6BAAML,EAAOsB,OAAOjB,UAAkB,KAChE,kBAACkB,GAAA,EAAD,CACIxK,MAAO,cACPyK,QAAS,kBAAC9G,EAAA,EAAD,iBAAcsF,EAAOqB,cAAc,cAAnC,CACLzG,QAASoF,EAAOG,OAAOI,gBAI/B,kBAAC/C,EAAA,EAAD,CAAQpE,KAAM,SAAUtC,QAAS,YAAaW,MAAO,WAArD,e,qBC7DjB,SAASgK,GAAT,GAAyC,IAAD,IAA1BpF,YAA0B,SACrC7F,EAASC,aAAiD,SAACC,GAAD,OAAWA,EAAMC,IAAIH,UAC/E6C,EAAc5C,aAAuC,SAACC,GAAD,OAAWA,EAAMC,IAAI0C,eAC1EH,EAAazC,aAAuC,SAAAC,GAAK,OAAIA,EAAMiH,KAAKzE,cACxER,EAAW4D,cAEjBC,qBAAU,WACN7D,GTK8B,SAACA,GACvCH,IAAasD,MAAK,SAAAC,GACa,IAAxBA,EAAItD,KAAKuD,YACRrD,EAASS,GAAgB,IAK7BT,EAXoD,CAACU,KAAM,yBAA0BvC,OAWxD,YSZ1B,IAEH,IAAM6K,EAAgBvH,uBAAY,WAC9BzB,GVgBqB,SAACA,GAC1BA,EAASI,EAAe,YACxBP,IACKsD,MAAK,SAACC,GACyB,IAAxBA,EAAItD,KAAKuD,YACTrD,EAASS,GAAgB,IACzBT,EAASI,EAAe,eAExBL,EAAqBqD,EAAItD,KAAME,MAGtCuD,OAAM,SAAC3F,GACJyC,EAAyBzC,EAAOoC,MAExCA,EAASI,EAAe,mBU7BrB,IAEH,OAAKO,EAQD,kBAAC,KAAD,KACI,yBAAKmB,UAAU,OACX,kBAAC4E,GAAD,MACA,kBAACuC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACvK,EAAA,EAAD,CAAYwK,KAAK,QAAQrK,MAAM,WAC3B,kBAACsK,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYlL,QAAQ,MAApB,gBAGA,4BACI,4BACKoC,GAAc,kBAACsE,EAAA,EAAD,CAAQ/F,MAAM,UAAUF,QAASmK,GAAjC,cAIf,YAAXlL,GAAwB,kBAACyL,EAAA,EAAD,OAE7B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,GAAD,CAAe5E,UAAW,GAAIrB,KAAMA,OAC1E,kBAAC,KAAD,CAAOgG,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,GAAD,SACrC,kBAAC,KAAD,CAAOD,KAAM,IAAKC,OAAQ,kBAAM,sDAChC,kBAAC,KAAD,CAAUC,KAAM,IAAKtD,GAAI,aA/BlC,yBAAK3B,MAAO,CAACsE,SAAU,QAASY,IAAK,MAAOC,KAAM,MAAOC,MAAO,SACnE,kBAAC,KAAD,O,uBC1BNC,GAAcC,aAAgB,CAChClF,UTG4B,WAAsG,IAArGhH,EAAoG,uDAAjEuC,EAAckF,EAAmD,uCACjI,OAAQA,EAAO/E,MACX,IAAK,kBACD,OAAO1C,EAAM0G,QAAO,SAAA0B,GAAE,OAAIA,EAAGvE,KAAO4D,EAAO5D,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAY4D,EAAO3B,UAAnB,IAA6BY,OAAQ,MAAOyF,aAAc,UAA1D,mBAAsEnM,IAC1E,IAAK,wBACD,OAAOA,EAAM2G,KAAI,SAAAyB,GAAE,OAAIA,EAAGvE,KAAO4D,EAAO5D,GAAjB,2BAA0BuE,GAA1B,IAA8B1I,MAAO+H,EAAOrB,WAAYgC,KACnF,IAAK,yBACD,OAAOpI,EAAM2G,KAAI,SAAAyB,GAAE,OAAIA,EAAGvE,KAAO4D,EAAO5D,GAAjB,2BAA0BuE,GAA1B,IAA8B1B,OAAQe,EAAOf,SAAU0B,KAClF,IAAK,gCACD,OAAOpI,EAAM2G,KAAI,SAAAyB,GAAE,OAAIA,EAAGvE,KAAO4D,EAAO5D,GAAjB,2BAA0BuE,GAA1B,IAA8B+D,aAAc1E,EAAO3H,SAAUsI,KACxF,IAAK,gBACD,OAAOX,EAAOT,UAAUL,KAAI,SAAAyB,GAAE,kCAASA,GAAT,IAAa1B,OAAQ,MAAOyF,aAAc,YAE5E,QACI,OAAOnM,ISlBf2E,MNGwB,WAA+D,IAA9D3E,EAA6D,uDAAtCuC,EAAckF,EAAwB,uCACtF,OAAQA,EAAO/E,MACX,IAAK,cACD,OAAO,2BAAI1C,GAAX,kBAAmByH,EAAOrE,WAAapD,EAAMyH,EAAOrE,YAAYsD,QAAO,SAAA7B,GAAC,OAAIA,EAAEhB,KAAO4D,EAAOpE,YAEhG,IAAK,WACD,OAAO,2BAAIrD,GAAX,kBAAmByH,EAAO7D,KAAKwI,WAA/B,CAA6C3E,EAAO7D,MAApD,mBAA6D5D,EAAMyH,EAAO7D,KAAKwI,gBAEnF,IAAK,cACD,OAAO,2BACApM,GADP,kBACeyH,EAAOrE,WAAapD,EAAMyH,EAAOrE,YACvCuD,KAAI,SAAA9B,GAAC,OAAIA,EAAEhB,KAAO4D,EAAOpE,OAAhB,2BAA6BwB,GAAM4C,EAAOnE,OAASuB,OAEzE,IAAK,eACD,OAAO,2BAAI7E,GAAX,kBAAmByH,EAAO3B,SAASjC,GAAK,KAC5C,IAAK,kBACD,IAAMwI,EAAS,eAAOrM,GAEtB,cADOqM,EAAU5E,EAAO5D,IACjBwI,EACX,IAAK,gBACD,IAAMA,EAAS,eAAOrM,GAItB,OAHAyH,EAAOT,UAAUsF,SAAQ,SAAAlE,GACrBiE,EAAUjE,EAAGvE,IAAM,MAEhBwI,EASX,IAAK,YACD,OAAO,2BAAIrM,GAAX,kBAAmByH,EAAOrE,WAAaqE,EAAO9C,QAElD,QACI,OAAO3E,IMvCfC,IVFsB,WAAoF,IAAnFD,EAAkF,uDAAxDuC,EAAckF,EAA0C,uCACzG,OAAQA,EAAO/E,MACX,IAAK,iBACD,OAAO,2BAAI1C,GAAX,IAAkBF,OAAQ2H,EAAO3H,SACrC,IAAK,gBACD,OAAO,2BAAIE,GAAX,IAAkBJ,MAAO6H,EAAO7H,QACpC,IAAK,yBACD,OAAO,2BAAII,GAAX,IAAkB2C,YAAa8E,EAAOtH,QAC1C,QACI,OAAO,eAAIH,KUNnBiH,KXDuB,WAAoF,IAAnFjH,EAAkF,uDAAxDuC,EAAckF,EAA0C,uCAC1G,OAAQA,EAAO/E,MACX,IAAK,yBACD,OAAO,2BAAI1C,GAAX,IAAkBwC,WAAYiF,EAAOtH,QACzC,QACI,OAAOH,MWANuM,GAAQC,aAAYP,GAAaQ,aAAgB/E,OAM9D5I,OAAOyN,MAAQA,GCXfG,IAASd,OAEL,kBAAC,IAAD,CAAUW,MAAOA,IACb,kBAAC,GAAD,OAEJI,SAASC,eAAe,SlB0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5H,MAAK,SAAA6H,GACJA,EAAaC,gBAEd1H,OAAM,SAAA3F,GACL4F,QAAQ5F,MAAMA,EAAM0C,c","file":"static/js/main.cb3413fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {instance} from \"./todolists-api\"\r\n\r\n\r\n//API\r\nexport const taskApi = {\r\n    getTasks(todolistId: string) {\r\n\r\n        return instance.get<GetTaskResponseTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n\r\n        return instance.delete<CommonResponseTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseTaskType<{ item: TasksType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    /*updateTaskTitle(todolistId: string, taskId: string, title: string) {\r\n        return instance.put<CommonResponseTaskType<{ item: TasksType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {title})\r\n    },*/\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseTaskType<TasksType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, {model})\r\n    }\r\n}\r\n\r\n//Types\r\nexport type CommonResponseTaskType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TasksType = {\r\n    description: string;\r\n    title: string;\r\n    status: TaskStatuses;\r\n    priority: TaskPriorities;\r\n    startDate: string;\r\n    deadline: string;\r\n    id: any;\r\n    todoListId: string;\r\n    order: number;\r\n    addedDate: string;\r\n}\r\nexport type GetTaskResponseTaskType = {\r\n    items: Array<TasksType>,\r\n    totalCount: number,\r\n    error: string\r\n}\r\nexport  type UpdateTaskModelType = {\r\n    description: string;\r\n    title: string;\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string;\r\n    deadline: string;\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { RequestStatusType } from '../../app/app-reducer';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo (function ({addItem, disabled=false}: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state=> state.app.status)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem(title);\r\n            setTitle('');\r\n        }\r\n    }\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Field title is required')\r\n        }\r\n    }\r\n    return <div>\r\n\r\n        <TextField\r\n            disabled={status === 'loading'}\r\n            value={title}\r\n                   variant={\"outlined\"}\r\n                   label={'Type value'}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addItemHandler} disabled = {disabled} color={'primary'}> <ControlPoint/></IconButton>\r\n    </div>\r\n})","import axios from 'axios'\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '116aa66f-547d-453c-a922-c810691f6d50'\r\n    }\r\n\r\n})\r\n\r\n//API\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todoId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    updateTodoTitle(todoId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todoId}`, {title})\r\n    }\r\n}\r\n\r\n//Types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\nexport type TodoType = {\r\n    id: string;\r\n    title: string;\r\n    addedDate: string;\r\n    order: number;\r\n}\r\n\r\n\r\n","\r\nimport {CommonResponseType, instance} from \"./todolists-api\"\r\n\r\n\r\n\r\n//API\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{userId?:number}>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<{id: number, email: string, login:string}>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<CommonResponseType<{userId?:number}>>('auth/me')\r\n    }\r\n}\r\n\r\n//Types\r\n\r\nexport type LoginParamsType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: string;\r\n}\r\n\r\n\r\n","import { Dispatch } from \"react\";\r\nimport { CommonResponseTaskType } from \"../api/tasks-api\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\n\r\nexport const handleServerAppError = <T>(data:CommonResponseTaskType<T>, dispatch: Dispatch<SetAppErrorActionType|SetAppStatusActionType>) => {\r\n\r\n    if (data?.messages?.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'));\r\n}\r\n\r\nexport const handleServerNetworkError=(error: { message: string }, dispatch: Dispatch<SetAppErrorActionType|SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message :'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'));\r\n\r\n}\r\n","import {Dispatch} from \"react\"\r\nimport {authApi, LoginParamsType} from \"../../api/auth-api\"\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\"\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utills\"\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n//thunks creators\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authApi.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n          dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n    dispatch(setAppStatusAC('succeeded'));\r\n}\r\n\r\nexport const logoutTC= () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authApi.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n    dispatch(setAppStatusAC('succeeded'));\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>","\r\nimport { authApi } from \"../api/auth-api\"\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\"\r\n\r\nconst initialState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    initialised: true\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALISED\":\r\n            return {...state, initialised: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n//action creators\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitialisedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALISED', value} as const)\r\n\r\n//thunk creator\r\nexport const initialisedAppTC = ( ) =>(dispatch: any) =>{\r\nauthApi.me().then(res => {\r\n    if(res.data.resultCode === 0){\r\n        dispatch(setIsLoggedInAC(true))\r\n\r\n    } else {\r\n\r\n    }\r\n    dispatch(setAppInitialisedAC(true))\r\n})\r\n}\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    //true if apply is initialised\r\n    initialised: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n| ReturnType<typeof setAppInitialisedAC>\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {todolistApi, TodoType} from \"../../api/todolists-api\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType, setAppErrorAC, SetAppErrorActionType} from \"../../app/app-reducer\";\r\nimport { handleServerAppError } from \"../../utils/error-utills\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\n//Reducer:\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.newTitle} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS' :\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//Action Creators\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodoType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: id,\r\n    newTitle: title\r\n} as const)\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: id,\r\n    filter: filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (status: RequestStatusType, id: string) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status} as const)\r\nexport const setTodolistAC = (todolists: Array<TodoType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n//Thunk Creators\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistApi.getTodos()\r\n            .then((res) => {\r\n                dispatch(setTodolistAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            })\r\n            .catch(error => {\r\n                handleServerAppError(error, dispatch);\r\n            })\r\n\r\n    }\r\n}\r\nexport const removeTodolistsTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n\r\n        dispatch(changeTodolistEntityStatusAC('loading', todolistId));\r\n\r\n        todolistApi.deleteTodo(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            })\r\n    }\r\n}\r\nexport const addTodolistsTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistApi.createTodo(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistApi.updateTodoTitle(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// types of AC classiques\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistAC>\r\n//types generiques\r\nexport type ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'completed' | 'active';\r\nexport type TodolistDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RequestStatusType } from '../../app/app-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\nlet [editMode, setEditMode] = useState(false)\r\n\r\nlet [title, setTitle] = useState('')\r\n    const activateEditMode = () => {\r\n    setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n\r\n    const activateViewMode = () => {\r\n    setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>)  =>setTitle(e.currentTarget.value )\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TasksType} from \"../../../../api/tasks-api\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    task: TasksType\r\n    todolistId: string\r\n}\r\n\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div key={props.task.id}\r\n                className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\r\n        <Checkbox\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color='primary'\r\n        />\r\n\r\n        <EditableSpan title={props.task.title}\r\n                      onChange={onTitleChangeHandler}\r\n        />\r\n\r\n        <IconButton aria-label=\"Delete\" onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType,} from \"./todolists-reducer\";\r\nimport {taskApi, TaskPriorities, TaskStatuses, TasksType, UpdateTaskModelType} from \"../../api/tasks-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./../../app/store\";\r\nimport {TaskStateType} from \"./TodolistsList\";\r\nimport {setAppStatusAC, SetAppStatusActionType, SetAppErrorActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utills\";\r\n\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        case 'SET-TODOLISTS' : {\r\n            const stateCopy = {...state};\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        //or with reduce\r\n        //{\r\n        //             return action.todolists.reduce((acc, tl) => {\r\n        //                 stateCopy[tl.id] = []\r\n        //                 return stateCopy\r\n        //             }, {...state})\r\n        //         }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', todolistId, taskId} as const)\r\nexport const addTaskAC = (task: TasksType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TasksType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n//thunks creators\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    taskApi.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistID: string, id: string) => (dispatch: Dispatch<ActionsType| SetAppErrorActionType>) => {\r\n\r\n    taskApi.deleteTask(todolistID, id)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(id, todolistID));\r\n        })\r\n        /*.catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })*/\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    taskApi.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item;\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string ) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId);\r\n        if (!task) {\r\n            console.warn('task is not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            description: task.description,\r\n            title: task.title,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        taskApi.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n//types generiques\r\nexport  type UpdateDomainTaskModelType = {\r\n    description?: string;\r\n    title?: string;\r\n    status?: TaskStatuses,\r\n    priority?: TaskPriorities,\r\n    startDate?: string;\r\n    deadline?: string;\r\n}\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TasksType} from '../../../api/tasks-api';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer';\r\nimport {Task} from './Task/Task';\r\nimport {fetchTasksTC} from '../tasks-reducer';\r\nimport { AppRootStateType } from '../../../app/store';\r\nimport { RequestStatusType } from '../../../app/app-reducer';\r\n\r\n\r\ntype ToDoListPropsType = {\r\n    todolist: TodolistDomainType\r\n        tasks: Array<TasksType>\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n        removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const ToDoList = React.memo(function ({demo = false, ...props}: ToDoListPropsType) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, []);\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        props.removeTodoList(props.todolist.id)\r\n    }, []);\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todolist.id, newTitle)\r\n    }, [props.todolist.id, props.changeTodoListTitle]);\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter('all', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id\r\n    ]);\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter('active', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id\r\n    ]);\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter('completed', props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id\r\n    ]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} onChange={changeTodoListTitle}/>\r\n            <IconButton aria-label=\"Delete\" onClick={removeTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} />\r\n\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'contained' : 'text'}\r\n                /*className={props.filter === 'all' ? 'active-filter' : ''}*/\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'contained' : 'text'}\r\n                    color={\"primary\"}\r\n                /*className={props.filter === 'active' ? 'active-filter' : ''}*/\r\n                    onClick={onActiveClickHandler}\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={\"secondary\"}\r\n                /*className={props.filter === 'completed' ? 'active-filter' : ''}*/\r\n                    onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {\r\n    addTodolistsTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistsTC,\r\n    TodolistDomainType,\r\n} from \"../TodolistsList/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TaskStatuses, TasksType} from '../../api/tasks-api';\r\nimport {ToDoList} from './Todolist/ToDoList';\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from './tasks-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nexport type TodolistsListPropsType = {\r\n    todolists: Array<TodolistDomainType>\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(( id: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(todoListID, id))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todoListID));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todoListID));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        const action = changeTodolistFilterAC(value, todoListID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const thunk = removeTodolistsTC(todoListID);\r\n        dispatch(thunk);\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <ToDoList\r\n                                    todolist={tl}\r\n                                    key={tl.id}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackbars() {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state=> state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?:React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n    dispatch(setAppErrorAC(null))\r\n\r\n    };\r\n\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n            </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button,\r\n    Grid\r\n} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './auth-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispath = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values)=> {\r\n            if(!values.email){\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if(!values.password){\r\n                return {\r\n                    password: 'Password required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispath(loginTC(values))\r\n            alert(JSON.stringify(values, null, 2));\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport ErrorSnackbars from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {initialisedAppTC, RequestStatusType} from './app-reducer';\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n//UI\r\nexport function App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const initialised = useSelector<AppRootStateType, boolean>((state) => state.app.initialised)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initialisedAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!initialised) {\r\n        return <div style={{position: 'fixed', top: '30%', left: '50%', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className='App'>\r\n                <ErrorSnackbars/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge='start' color='inherit'>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant='h6'>\r\n                            My Todolists\r\n                        </Typography>\r\n                        <ul>\r\n                            <li>\r\n                                {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Log out</Button>}\r\n                            </li>\r\n                        </ul>\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList todolists={[]} demo={demo}/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {combineReducers} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { authReducer } from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\nexport default rootReducer;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}